@model IEnumerable<StatauIrPristatau.Models.Order>

<!DOCTYPE html>
<html>

<head>
    @using StatauIrPristatau.Helpers
    @using StatauIrPristatau.Content
    <link rel="stylesheet" type="text/css" href="~/Content/style.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <title>Statau ir pristatau</title>
    <script src="~/Scripts/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <style>
        #map {
            height: 550px;
            width: 100%;
        }

        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #warnings-panel {
            width: 100%;
            height: auto;
            text-align: center;
        }
    </style>
</head>
<body>
    <div style="width: 100%">
        <nav class="navbar navbar-expand-lg navbar-light" style="background-color: #c0392b">
            <a class="navbar-brand" href="#">Statau ir pristatau</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav" style="margin-left: auto">
                    <li class="nav-item">
                        @Html.ActionLink("Naudotojų sąrašas", "ToMainView", "MainAdmin", null, new { @class = "nav-link" })
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("Užsakymų istorija", "openOrderHistory", "MainUser", null, new { @class = "nav-link" })
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("Vykdomi užsakymai", "openOrderedShipments", "Customer", null, new { @class = "nav-link" })
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("Žemėlapis", "openMap", "Customer", null, new { @class = "nav-link" })
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("Vertinimas", "openCourierRatings", "Customer", null, new { @class = "nav-link" })
                    </li>
                    <li class="nav-item ">
                        <a class="nav-link disabled" href="#">Atsijungti</a>
                    </li>
                </ul>
            </div>
        </nav>
    </div>

    <div style="width: 100%">
        <div class="text-center my-3">
            <h3>Žemėlapis</h3>
        </div>
        <div id="map"></div>
        <div id="warnings-panel"></div>
        <div style="text-align: center; padding-top: 1rem;">
            <button id="generateRoute" class="btn" style="background-color: #c0392b; color: white;">Siuntu paemimo marsrutas</button>
            <button id="generateRouteBack" class="ml-3 btn" style="background-color: #c0392b; color: white;">Siuntu pristatymo marsrutas</button>
        </div>
        </div>

        <script>
            var pickUpAddress = [];
            var pickUpEndAddress = [];
            var deliveryAddress = [];
            var deliveryEndAddress = [];
            $(function () {
                $.ajax({
                    type: "GET",
                    url: "/Customer/getPickUpAddress",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        console.log("ahujenai");
                        for (i = 0; i < data.length; i++) {
                            if (i >= 1) {
                                if (data[i] != null) {
                                    pickUpAddress.push({ location: data[i], stopover: true });
                                }
                            }
                            else {
                                pickUpEndAddress.push(data[i]);
                            }
                        }
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });

                $.ajax({
                    type: "GET",
                    url: "/Customer/getDeliveryAddress",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        console.log("ahujenai");
                        for (i = 0; i < data.length; i++) {
                            if (i >= 1) {
                                if (data[i] != null) {
                                    deliveryAddress.push({ location: data[i], stopover: true });
                                }
                            }
                            else {
                                deliveryEndAddress.push(data[i]);
                            }
                        }
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            });

            console.log(pickUpAddress);
            console.log(pickUpEndAddress);
            console.log(deliveryAddress);
            console.log(deliveryEndAddress);

            //console.log(pickUpAddress);

            var myLatLng = "";

            function initMap() {
                var markerArray = [];

                // Instantiate a directions service.
                var directionsService = new google.maps.DirectionsService;

                // Create a map and center it
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 13,
                    center: { lat: 54.687157, lng: 25.279652 }
                });

                // Create a renderer for directions and bind it to the map.
                var directionsRenderer = new google.maps.DirectionsRenderer({ map: map });

                // Instantiate an info window to hold step text.
                var stepDisplay = new google.maps.InfoWindow;

                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var myPosition = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        myLatLng += myPosition[Object.keys(myPosition)[0]] + "," + myPosition[Object.keys(myPosition)[1]];
                    })
                }

                // Listen to change events from the start and end lists.
                var onClickHandler = function () {
                    calculateAndDisplayRoute(
                        directionsRenderer, directionsService, markerArray, stepDisplay, map);
                };
                var onClickHandler1 = function () {
                    calculateAndDisplayRouteBack(
                        directionsRenderer, directionsService, markerArray, stepDisplay, map);
                };
                document.getElementById('generateRouteBack').addEventListener('click', onClickHandler1);
                document.getElementById('generateRoute').addEventListener('click', onClickHandler);
            }

            function calculateAndDisplayRoute(directionsRenderer, directionsService,
                markerArray, stepDisplay, map) {
                // First, remove any existing markers from the map.
                for (var i = 0; i < markerArray.length; i++) {
                    markerArray[i].setMap(null);
                }

                //var waypts = [{ location: "partizanu g. 100", stopover: true }, { location: "partizanu g. 70", stopover: true }];

                // Retrieve the start and end locations and create a DirectionsRequest using
                // WALKING directions.
                directionsService.route({
                    origin: myLatLng,
                    destination: pickUpEndAddress[0],
                    waypoints: pickUpAddress,
                    optimizeWaypoints: true,
                    travelMode: 'DRIVING'
                }, function (response, status) {
                    // Route the directions and pass the response to a function to create
                    // markers for each step.
                    if (status === 'OK') {
                        document.getElementById('warnings-panel').innerHTML =
                            '<b>' + response.routes[0].warnings + '</b>';
                        directionsRenderer.setDirections(response);
                        showSteps(response, markerArray, stepDisplay, map);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            }

            function calculateAndDisplayRouteBack(directionsRenderer, directionsService,
                markerArray, stepDisplay, map) {
                // First, remove any existing markers from the map.
                for (var i = 0; i < markerArray.length; i++) {
                    markerArray[i].setMap(null);
                }

                var waypts = [{ location: "Panevezys", stopover: true }, { location: "Vilnius", stopover: true }];

                // Retrieve the start and end locations and create a DirectionsRequest using
                // WALKING directions.
                directionsService.route({
                    origin: myLatLng,
                    destination: deliveryEndAddress[0],
                    waypoints: deliveryAddress,
                    optimizeWaypoints: true,
                    travelMode: 'DRIVING'
                }, function (response, status) {
                    // Route the directions and pass the response to a function to create
                    // markers for each step.
                    if (status === 'OK') {
                        document.getElementById('warnings-panel').innerHTML =
                            '<b>' + response.routes[0].warnings + '</b>';
                        directionsRenderer.setDirections(response);
                        showSteps(response, markerArray, stepDisplay, map);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            }

            function showSteps(directionResult, markerArray, stepDisplay, map) {
                // For each step, place a marker, and add the text to the marker's infowindow.
                // Also attach the marker to an array so we can keep track of it and remove it
                // when calculating new routes.
                var myRoute = directionResult.routes[0].legs[0];
                for (var i = 0; i < myRoute.steps.length; i++) {
                    var marker = markerArray[i] = markerArray[i] || new google.maps.Marker;
                    marker.setMap(map);
                    marker.setPosition(myRoute.steps[i].start_location);
                    attachInstructionText(
                        stepDisplay, marker, myRoute.steps[i].instructions, map);
                }
            }

            function attachInstructionText(stepDisplay, marker, text, map) {
                google.maps.event.addListener(marker, 'click', function () {
                    // Open an info window when the marker is clicked on, containing the text
                    // of the step.
                    stepDisplay.setContent(text);
                    stepDisplay.open(map, marker);
                });
            }
        </script>
        <script async defer
                src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDshY50hSMYmE-6frHkBsFuPvmuiLy2RbM&callback=initMap">
        </script>
    </body>

   </html>

